diff -urN a/apt-private/private-output.cc b/apt-private/private-output.cc
--- a/apt-private/private-output.cc	2024-06-04 19:08:40.747091253 +0800
+++ b/apt-private/private-output.cc	2024-06-04 19:15:06.355536467 +0800
@@ -28,6 +28,11 @@
 #include <sstream>
 
 #include <apti18n.h>
+
+#if defined(__APPLE__)
+#include <Foundation/Foundation.h>
+#endif
+
 									/*}}}*/
 
 using namespace std;
@@ -531,6 +536,120 @@
       }
    }
 }
+
+#if defined(__APPLE__)
+static NSMutableDictionary * SileoBrokenPackage(ostream &out, pkgCacheFile * const Cache, pkgCache::PkgIterator const &Pkg, bool const Now)
+{
+   if (Now == true)
+   {
+      if ((*Cache)[Pkg].NowBroken() == false)
+         return nil;
+   }
+   else
+   {
+      if ((*Cache)[Pkg].InstBroken() == false)
+         return nil;
+   }
+
+   NSMutableDictionary *packages = [NSMutableDictionary dictionary];
+
+   NSMutableArray *deps = [NSMutableArray array];
+
+   // Print out each package and the failed dependencies
+   [packages setObject:deps forKey:[NSString stringWithUTF8String:Pkg.FullName(true).c_str()]];
+
+   pkgCache::VerIterator Ver;
+
+   if (Now == true)
+      Ver = Pkg.CurrentVer();
+   else
+      Ver = (*Cache)[Pkg].InstVerIter(*Cache);
+
+   if (Ver.end() == true)
+   {
+      return packages;
+   }
+
+   for (pkgCache::DepIterator D = Ver.DependsList(); D.end() == false;)
+   {
+      // Compute a single dependency element (glob or)
+      pkgCache::DepIterator Start;
+      pkgCache::DepIterator End;
+      D.GlobOr(Start,End); // advances D
+
+      if ((*Cache)->IsImportantDep(End) == false)
+         continue;
+
+      if (Now == true)
+      {
+         if (((*Cache)[End] & pkgDepCache::DepGNow) == pkgDepCache::DepGNow)
+            continue;
+      }
+      else
+      {
+         if (((*Cache)[End] & pkgDepCache::DepGInstall) == pkgDepCache::DepGInstall)
+            continue;
+      }
+
+      NSMutableArray *orDependencies = [NSMutableArray array];
+      [deps addObject:orDependencies];
+
+      while (1)
+      {
+
+         NSMutableDictionary *dependency = [NSMutableDictionary dictionary];
+         [orDependencies addObject:dependency];
+         [dependency setObject:[NSString stringWithUTF8String:End.DepType()] forKey:@"Type"];
+
+         [dependency setObject:[NSString stringWithUTF8String:Start.TargetPkg().FullName(true).c_str()] forKey:@"Package"];
+
+         // Show a quick summary of the version requirements
+         if (Start.TargetVer() != 0)
+            [dependency setObject:[NSString stringWithFormat:@"%s %s", Start.CompType(), Start.TargetVer()] forKey:@"VersionSummary"];
+
+         /* Show a summary of the target package if possible. In the case
+         of virtual packages we show nothing */
+         pkgCache::PkgIterator Targ = Start.TargetPkg();
+         if (Targ->ProvidesList == 0)
+         {
+            pkgCache::VerIterator Ver = (*Cache)[Targ].InstVerIter(*Cache);
+            if (Now == true)
+               Ver = Targ.CurrentVer();
+
+            if (Ver.end() == false)
+            {
+               if (Now == true)
+                  [dependency setObject:[NSString stringWithFormat:@"%s is installed",Ver.VerStr()] forKey:@"Reason"];
+               else
+                  [dependency setObject:[NSString stringWithFormat:@"%s is to be installed",Ver.VerStr()] forKey:@"Reason"];
+            }
+            else
+            {
+               if ((*Cache)[Targ].CandidateVerIter(*Cache).end() == true)
+               {
+                  if (Targ->ProvidesList == 0)
+                     [dependency setObject:@"it is not installable" forKey:@"Reason"];
+                  else
+                     [dependency setObject:@"it is a virtual package" forKey:@"Reason"];
+               }
+               else {
+                  if (Now)
+                     [dependency setObject:@"it is not installed" forKey:@"Reason"];
+                  else
+                     [dependency setObject:@"it is not going to be installed" forKey:@"Reason"];
+               }
+            }
+         }
+
+         if (Start == End)
+            break;
+         ++Start;
+      }
+   }
+   return packages;
+}
+#endif
+
 void ShowBroken(ostream &out, CacheFile &Cache, bool const Now)
 {
    if (Cache->BrokenCount() == 0)
@@ -540,8 +659,28 @@
    else
       out << _("Unsatisfied dependencies:") << endl;
    SortedPackageUniverse Universe(Cache);
-   for (auto const &Pkg: Universe)
-      ShowBrokenPackage(out, &Cache, Pkg, Now);
+#if defined(__APPLE__)
+   bool useJSON = _config->FindB("APT::Format::for-sileo", false);
+
+   if (useJSON){
+      NSMutableDictionary *packages = [NSMutableDictionary dictionary];
+      for (auto const &Pkg: Universe){
+         NSMutableDictionary *package = SileoBrokenPackage(out, &Cache, Pkg, Now);
+         [packages addEntriesFromDictionary:package];
+      }
+
+      cout << flush;
+
+      NSData *data = [NSJSONSerialization dataWithJSONObject:packages options:0 error:nil];
+      NSFileHandle *stdout = [NSFileHandle fileHandleWithStandardOutput];
+      [stdout writeData:data];
+   } else {
+#endif
+      for (auto const &Pkg: Universe)
+         ShowBrokenPackage(out, &Cache, Pkg, Now);
+#if defined(__APPLE__)
+   }
+#endif
 }
 void ShowBroken(ostream &out, pkgCacheFile &Cache, bool const Now)
 {
